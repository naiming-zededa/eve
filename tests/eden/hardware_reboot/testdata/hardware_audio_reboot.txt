# Simple test of Audio device after reboot of guest

{{define "port"}}2223{{end}}
{{define "ssh"}} ssh -oServerAliveInterval=10 -oConnectTimeout=10 -oStrictHostKeyChecking=no -oPasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa -p {{template "port"}} ubuntu@$HOST {{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop

# Starting of eve reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait 60m -reboot=0 -count=1 &

exec -t 20m bash deploy.sh {{template "port"}}
test eden.app.test -test.v -timewait 30m RUNNING eclient

exec -t 20m bash ssh.sh {{template "port"}}
stdout 'Ubuntu'

# Audio device passthrough setup
exec -t 20m bash set_audio.sh eclient
stdout 'msg="Config loaded"'

# Wait for reconfig
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# Install sound drivers
exec -t 20m bash install_drivers.sh

# Reboot application
exec -t 5m bash reboot.sh

# Wait for reboot for driver installation
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# Get info about sound card
exec -t 20m bash get_soundcard.sh
stdout 'CARD=Intel'

exec -t 10m bash get_reboot_time.sh
cp stdout reboot_time

# Reboot application
exec -t 5m bash reboot.sh

# Wait for reboot
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

exec -t 5m bash get_reboot_time.sh
! cmp stdout reboot_time

# Get info about sound card after reboot
exec -t 20m bash get_soundcard.sh
stdout 'CARD=Intel'

# teardown applications
eden pod delete eclient

test eden.app.test -test.v -timewait 20m - eclient

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- deploy.sh --
port=$1
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}

IMG="https://cloud-images.ubuntu.com/releases/focal/release-20210510/ubuntu-20.04-server-cloudimg-amd64.img"
PUB_KEY="$( cat {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa.pub )"
$EDEN pod deploy -n eclient --memory=1GB  ${IMG} -p $port:22 --metadata="#cloud-config\nssh_authorized_keys:\n - $PUB_KEY mykey@host"


-- ssh.sh --
port=$1
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

for i in `seq 20`
do
sleep 20
# Test SSH-access to VM
echo $i\) {{template "ssh"}} grep Ubuntu /etc/issue
{{template "ssh"}} grep Ubuntu /etc/issue && break
done

-- set_audio.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
CNF=eve.cfg

$EDEN controller edge-node get-config --file $CNF

jq '.deviceIoList += [{ "ptype": "PhyIoAudio", "phylabel": "Audio", "phyaddrs": { "PciLong": "0000:00:1b.0" }, "logicallabel": "Audio", "assigngrp": "Audio", "usage": "PhyIoUsageNone", "usagePolicy": {}, "cbattr": {} }]' < $CNF | \
jq '.apps = (.apps | map(if .displayname == "'$1'" then . + {"adapters":[{"type": "PhyIoAudio", "name": "Audio"}]} else del(.adapters) end))' | \
jq '.apps = (.apps | map(if .displayname == "'$1'" then . + {"purge": {"counter": 1}} else . end))' > $CNF.new
$EDEN controller edge-node set-config --file $CNF.new

-- get_reboot_time.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} uptime -s
{{template "ssh"}} uptime -s

-- get_soundcard.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} aplay -L
{{template "ssh"}} aplay -L

-- reboot.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} 'sudo shutdown -r +1 &>/dev/null &'
{{template "ssh"}} 'sudo shutdown -r +1 &>/dev/null &'

-- install_drivers.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} 'sudo apt update && sudo apt-get install -y linux-modules-extra-`uname -r` alsa-utils'
{{template "ssh"}} 'sudo apt update && sudo apt-get install -y linux-modules-extra-`uname -r` alsa-utils'

