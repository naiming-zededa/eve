# Test for reboot of EVE
# we inject network outage and check for entities to come after reboot for qemu and vbox

{{$port := "2223"}}
{{$network_name := "n1"}}
{{$app_name := "eclient"}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Create n1 network
eden -t 1m network create 10.11.12.0/24 -n {{$network_name}}

# Wait for run
test eden.network.test -test.v -timewait 10m ACTIVATED {{$network_name}}

eden pod deploy -n {{$app_name}} --memory=512MB docker://lfedge/eden-eclient:83cfe07 -p {{$port}}:22 --networks={{$network_name}}

test eden.app.test -test.v -timewait 20m RUNNING {{$app_name}}

exec -t 5m bash ssh.sh
stdout 'Ubuntu'

# send reboot command and wait in background
test eden.reboot.test -test.v -timewait=20m -reboot=1 -count=1 &

# wait for HALTED state which indicates that we are rebooting
test eden.app.test -test.v -timewait 5m HALTED {{$app_name}}

{{$devmodel := EdenConfig "eve.devmodel"}}

{{if or (eq $devmodel "ZedVirtual-4G") (eq $devmodel "VBox") }}
# simulate network outage
eden eve link down
# sleep without networks for 7 minutes
exec sleep 7m
{{end}}

# check info messages sent correct data in background
test eden.app.test -test.v -timewait 10m -check-new RUNNING {{$app_name}} &
test eden.network.test -test.v -timewait 10m -check-new ACTIVATED {{$network_name}} &


{{if or (eq $devmodel "ZedVirtual-4G") (eq $devmodel "VBox") }}
# return networks
eden eve link up
{{end}}

# wait for detectors
wait

# check ssh access to app after reboot
exec -t 5m bash ssh.sh
stdout 'Ubuntu'

eden pod delete {{$app_name}}
test eden.app.test -test.v -timewait 10m - {{$app_name}}

eden network delete {{$network_name}}
test eden.network.test -test.v -timewait 10m - {{$network_name}}

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for i in `seq 20`
do
sleep 20
# Test SSH-access to container
echo $i\) ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa -p {{$port}} root@$HOST grep Ubuntu /etc/issue
ssh -o ConnectTimeout=10 -oStrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa -p {{$port}} root@$HOST grep Ubuntu /etc/issue && break
done
