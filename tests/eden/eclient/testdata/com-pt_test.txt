# EDEN test which assumes a serial port.
# Verifying that a reboot from the guest doesnâ€™t disrupt the set of assigned adapters.
# We can not test that the serial port is functional; merely that it exists.

{{define "port"}}2223{{end}}
{{define "ssh"}} ssh -oServerAliveInterval=10 -oConnectTimeout=10 -oStrictHostKeyChecking=no -oPasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa -p {{template "port"}} root@$HOST {{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop
[!exec:jq] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 2 reboot limit
! test eden.reboot.test -test.v -timewait 10m -reboot=0 -count=2 &

eden pod deploy -n eclient --memory=512MB docker://itmoeve/eclient:0.7 -p {{template "port"}}:22

test eden.app.test -test.v -timewait 20m RUNNING eclient

exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# COM2 not in passthrough
exec -t 20m bash get_serial.sh /dev/ttyS1
stdout '/dev/ttyS1, UART: unknown, Port: 0x02f8, IRQ: 3'

# COM2 passthrough setup
exec -t 20m bash set_serial.sh eclient
stdout 'msg="Config loaded"'
# Wait for reconfig
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

# COM2 in passthrough
exec -t 20m bash get_serial.sh /dev/ttyS1
stdout '/dev/ttyS1, UART: 16550A, Port: 0x02f8, IRQ: 3'

exec -t 5m bash get_reboot_time.sh
cp stdout reboot_time

# Reboot application
! exec -t 1m bash reboot.sh

# Wait for reboot
exec -t 20m bash ssh.sh
stdout 'Ubuntu'

exec -t 5m bash get_reboot_time.sh
! cmp stdout reboot_time

# COM2 in passthrough
exec -t 20m bash get_serial.sh /dev/ttyS1
stdout '/dev/ttyS1, UART: 16550A, Port: 0x02f8, IRQ: 3'

eden pod delete eclient

test eden.app.test -test.v -timewait 10m - eclient

-- ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

for i in `seq 20`
do
sleep 20
# Test SSH-access to container
echo $i\) {{template "ssh"}} grep Ubuntu /etc/issue
{{template "ssh"}} grep Ubuntu /etc/issue && break
done

-- set_serial.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
CNF=eve.cfg

$EDEN controller edge-node get-config --file $CNF

jq '.deviceIoList += [{ "ptype": "PhyIoCOM", "phylabel": "COM2", "phyaddrs": { "Ioports": "2f8-2ff", "Irq": "3", "Serial": "/dev/ttyS1" }, "logicallabel": "COM2", "assigngrp": "COM2", "usage": "PhyIoUsageNone", "usagePolicy": { "freeUplink": false, "fallBackPriority": 0 }, "cbattr": {} }]' < $CNF | \
jq '.apps = (.apps | map(if .displayname == "'$1'" then . + {"adapters":[{"type": "PhyIoCOM", "name": "COM2"}]} else del(.adapters) end))' | \
jq '.apps = (.apps | map(if .displayname == "'$1'" then . + {"purge": {"counter": 1}} else . end))' > $CNF.new

$EDEN controller edge-node set-config --file $CNF.new

-- get_serial.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

for i in `seq 20`
do
sleep 20
# Test SSH-access to container
echo $i\) {{template "ssh"}} setserial -g $1
{{template "ssh"}} setserial -g $1 && break
done

-- get_reboot_time.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} uptime -s
{{template "ssh"}} uptime -s

-- reboot.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)

echo {{template "ssh"}} reboot
{{template "ssh"}} reboot

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
